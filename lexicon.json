{
  "terms": [
    {
      "id": 1,
      "term": "StudentID",
      "definition": "A unique identifier for each student",
      "domains": [
        "Education",
        "Identity"
      ],
      "regex": "^[A-Z]{2}\\d{6}$",
      "regexSource": "Two uppercase letters followed by six digits (e.g., ST123456)",
      "validationRules": [
        "Must be unique",
        "Not null",
        "Fixed length: 8"
      ],
      "code": "df.filter(df.StudentID.rlike('^[A-Z]{2}\\\\d{6}$'))",
      "function": {
        "validation": {
          "name": "validate_StudentID",
          "example": "validate_StudentID(df)",
          "definition": "def validate_StudentID(df):\n    return df.filter(df.StudentID.rlike(r'^[A-Z]{2}\\\\d{6}$'))"
        },
        "transformation": {
          "name": "transform_StudentID",
          "example": "transform_StudentID(df)",
          "definition": "def transform_StudentID(df):\n    return df.withColumn('StudentID', df.StudentID)"
        }
      }
    },
    {
      "id": 2,
      "term": "FirstName",
      "definition": "The student's given name",
      "domains": [
        "Education",
        "Personal Information"
      ],
      "regex": "^[A-Za-z'-]{1,50}$",
      "regexSource": "Allows alphabetic characters, hyphens, and apostrophes (max 50 chars)",
      "validationRules": [
        "Not null",
        "Max length: 50"
      ],
      "code": "df.filter(df.FirstName.rlike(\"^[A-Za-z'-]{1,50}$\"))",
      "function": {
        "validation": {
          "name": "validate_FirstName",
          "example": "validate_FirstName(df)",
          "definition": "def validate_FirstName(df):\n    return df.filter(df.FirstName.rlike(r'^[A-Za-z'-]{1,50}$'))"
        },
        "transformation": {
          "name": "transform_FirstName",
          "example": "transform_FirstName(df)",
          "definition": "def transform_FirstName(df):\n    return df.withColumn('FirstName', df.FirstName)"
        }
      }
    },
    {
      "id": 3,
      "term": "LastName",
      "definition": "The student's family name or surname",
      "domains": [
        "Education",
        "Personal Information"
      ],
      "regex": "^[A-Za-z'-]{1,50}$",
      "regexSource": "Same as FirstName",
      "validationRules": [
        "Not null",
        "Max length: 50"
      ],
      "code": "df.filter(df.LastName.rlike(\"^[A-Za-z'-]{1,50}$\"))",
      "function": {
        "validation": {
          "name": "validate_LastName",
          "example": "validate_LastName(df)",
          "definition": "def validate_LastName(df):\n    return df.filter(df.LastName.rlike(r'^[A-Za-z'-]{1,50}$'))"
        },
        "transformation": {
          "name": "transform_LastName",
          "example": "transform_LastName(df)",
          "definition": "def transform_LastName(df):\n    return df.withColumn('LastName', df.LastName)"
        }
      }
    },
    {
      "id": 4,
      "term": "DateOfBirth",
      "definition": "The student's birth date",
      "domains": [
        "Education",
        "Personal Information"
      ],
      "regex": "^\\d{4}-\\d{2}-\\d{2}$",
      "regexSource": "ISO 8601 format (YYYY-MM-DD)",
      "validationRules": [
        "Must be in the past",
        "Minimum age: 5"
      ],
      "code": "df.filter(df.DateOfBirth.rlike('^\\\\d{4}-\\\\d{2}-\\\\d{2}$'))",
      "function": {
        "validation": {
          "name": "validate_DateOfBirth",
          "example": "validate_DateOfBirth(df)",
          "definition": "def validate_DateOfBirth(df):\n    return df.filter(df.DateOfBirth.rlike(r'^\\\\d{4}-\\\\d{2}-\\\\d{2}$'))"
        },
        "transformation": {
          "name": "transform_DateOfBirth",
          "example": "transform_DateOfBirth(df)",
          "definition": "def transform_DateOfBirth(df):\n    return df.withColumn('DateOfBirth', df.DateOfBirth)"
        }
      }
    },
    {
      "id": 5,
      "term": "Email",
      "definition": "The student's primary email address",
      "domains": [
        "Education",
        "Communications"
      ],
      "regex": "^[\\w\\.-]+@[\\w\\.-]+\\.[A-Za-z]{2,}$",
      "regexSource": "Standard email format",
      "validationRules": [
        "Must be unique",
        "Must be valid format"
      ],
      "code": "df.filter(df.Email.rlike('^[\\\\w\\\\.-]+@[\\\\w\\\\.-]+\\\\.[A-Za-z]{2,}$'))",
      "function": {
        "validation": {
          "name": "validate_Email",
          "example": "validate_Email(df)",
          "definition": "def validate_Email(df):\n    return df.filter(df.Email.rlike(r'^[\\\\w\\\\.-]+@[\\\\w\\\\.-]+\\\\.[A-Za-z]{2,}$'))"
        },
        "transformation": {
          "name": "transform_Email",
          "example": "transform_Email(df)",
          "definition": "def transform_Email(df):\n    return df.withColumn('Email', df.Email)"
        }
      }
    },
    {
      "id": 6,
      "term": "PhoneNumber",
      "definition": "The student's contact number",
      "domains": [
        "Education",
        "Communications"
      ],
      "regex": "^\\+?\\d{10,15}$",
      "regexSource": "Optional '+' followed by 10\u201315 digits",
      "validationRules": [
        "Optional",
        "Must be digits only if present"
      ],
      "code": "df.filter(df.PhoneNumber.rlike('^\\\\+?\\\\d{10,15}$'))",
      "function": {
        "validation": {
          "name": "validate_PhoneNumber",
          "example": "validate_PhoneNumber(df)",
          "definition": "def validate_PhoneNumber(df):\n    return df.filter(df.PhoneNumber.rlike(r'^\\\\+?\\\\d{10,15}$'))"
        },
        "transformation": {
          "name": "transform_PhoneNumber",
          "example": "transform_PhoneNumber(df)",
          "definition": "def transform_PhoneNumber(df):\n    return df.withColumn('PhoneNumber', df.PhoneNumber)"
        }
      }
    },
    {
      "id": 7,
      "term": "EnrollmentYear",
      "definition": "The year the student enrolled",
      "domains": [
        "Education",
        "Academic"
      ],
      "regex": "^\\d{4}$",
      "regexSource": "Four-digit year",
      "validationRules": [
        "Must be current year or earlier",
        "Not null"
      ],
      "code": "df.filter(df.EnrollmentYear.rlike('^\\\\d{4}$'))",
      "function": {
        "validation": {
          "name": "validate_EnrollmentYear",
          "example": "validate_EnrollmentYear(df)",
          "definition": "def validate_EnrollmentYear(df):\n    return df.filter(df.EnrollmentYear.rlike(r'^\\\\d{4}$'))"
        },
        "transformation": {
          "name": "transform_EnrollmentYear",
          "example": "transform_EnrollmentYear(df)",
          "definition": "def transform_EnrollmentYear(df):\n    return df.withColumn('EnrollmentYear', df.EnrollmentYear)"
        }
      }
    },
    {
      "id": 8,
      "term": "GPA",
      "definition": "Grade Point Average of the student",
      "domains": [
        "Education",
        "Performance"
      ],
      "regex": "^([0-3]\\.[0-9]{1,2}|4\\.0{1,2})$",
      "regexSource": "Decimal between 0.00 and 4.00 (inclusive)",
      "validationRules": [
        "Range: 0.00 - 4.00",
        "Optional"
      ],
      "code": "df.filter(df.GPA.rlike('^([0-3]\\\\.[0-9]{1,2}|4\\\\.0{1,2})$'))",
      "function": {
        "validation": {
          "name": "validate_GPA",
          "example": "validate_GPA(df)",
          "definition": "def validate_GPA(df):\n    return df.filter(df.GPA.rlike(r'^([0-3]\\\\.[0-9]{1,2}|4\\\\.0{1,2})$'))"
        },
        "transformation": {
          "name": "transform_GPA",
          "example": "transform_GPA(df)",
          "definition": "def transform_GPA(df):\n    return df.withColumn('GPA', df.GPA)"
        }
      }
    },
    {
      "id": 9,
      "term": "Major",
      "definition": "The student's primary field of study",
      "domains": [
        "Education",
        "Academic"
      ],
      "regex": "^[A-Za-z&\\s]{2,100}$",
      "regexSource": "Letters, spaces, and ampersands allowed (2\u2013100 characters)",
      "validationRules": [
        "Not null",
        "Must match allowed academic programs"
      ],
      "code": "df.filter(df.Major.rlike('^[A-Za-z&\\\\s]{2,100}$'))",
      "function": {
        "validation": {
          "name": "validate_Major",
          "example": "validate_Major(df)",
          "definition": "def validate_Major(df):\n    return df.filter(df.Major.rlike(r'^[A-Za-z&\\\\s]{2,100}$'))"
        },
        "transformation": {
          "name": "transform_Major",
          "example": "transform_Major(df)",
          "definition": "def transform_Major(df):\n    return df.withColumn('Major', df.Major)"
        }
      }
    },
    {
      "id": 10,
      "term": "GraduationStatus",
      "definition": "The current graduation status of the student",
      "domains": [
        "Education",
        "Academic"
      ],
      "regex": "^(Enrolled|Graduated|Withdrawn|Deferred)$",
      "regexSource": "One of four allowed fixed statuses",
      "validationRules": [
        "Enum value",
        "Not null"
      ],
      "code": "df.filter(df.GraduationStatus.rlike('^(Enrolled|Graduated|Withdrawn|Deferred)$'))",
      "function": {
        "validation": {
          "name": "validate_GraduationStatus",
          "example": "validate_GraduationStatus(df)",
          "definition": "def validate_GraduationStatus(df):\n    return df.filter(df.GraduationStatus.rlike(r'^(Enrolled|Graduated|Withdrawn|Deferred)$'))"
        },
        "transformation": {
          "name": "transform_GraduationStatus",
          "example": "transform_GraduationStatus(df)",
          "definition": "def transform_GraduationStatus(df):\n    return df.withColumn('GraduationStatus', df.GraduationStatus)"
        }
      }
    }
  ]
}
